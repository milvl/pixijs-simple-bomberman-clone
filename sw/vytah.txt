

index.html:
<!doctype html>
<html>
  <head>
    <title>KIV/UUR - Bomberman Clone</title>
    <link rel="stylesheet" href="css/style.css">
    <!-- scripts -->
    <script src="node_modules/jquery/dist/jquery.min.js"></script>
    <script src="node_modules/pixi.js/dist/pixi.min.js"></script>
  </head>
  <body>
    <!-- game -->
    <script src="js/app.js" type="module"></script>

    <!-- elems -->
    <div id="game"></div>
  </body>
</html>###EOF###


app.js:
import loadAssetsManifest from './loader.js';

const WIDTH_SCALE_GAME_DIV = 0.7;
const HEIGHT_SCALE_GAME_DIV = 0.8;

/**
 * Config for PIXI application
 */
const PIXI_INIT_CONFIG = { 
    width: screen.width * WIDTH_SCALE_GAME_DIV, 
    height: screen.height * HEIGHT_SCALE_GAME_DIV 
}

// create a new instance of a pixi application
const app = new PIXI.Application();
await app.init(PIXI_INIT_CONFIG);

// add the canvas to "game" div
$("#game").append(app.canvas);

const manifest = {
    bundles: [
        {
            name: "sprites",
            assets: [
                { alias: "bunny", src: "https://pixijs.com/assets/bunny.png" },
                { alias: "spaceship", src: "https://pixijs.com/assets/spaceship.png" },
                { alias: "bomb", src: "img/bomb.png" }
            ]
        }
    ]
};

/**
 * Loads a manifest of asset bundles using PIXI Assets.
 * @param {Object} manifest - The manifest object containing bundles of assets.
 * @returns {Promise<Object>} A promise that resolves with the loaded assets.
 * @throws {Error} If there was an error loading the assets.
 */
async function loadAssets() {
    try {
        const assets = await loadAssetsManifest(manifest);
        // Use assets here, e.g., assets.bunny, assets.spaceship
        console.log('Assets loaded:', assets);
        return assets;
    } catch (error) {
        console.error('Error initializing game assets:', error);
        throw error;  // Re-throw the error to ensure it's propagated
    }
}

/**
 * Setup function
 */
async function setup() {
    console.log('Setting up game...');
    try {
        const assets = await loadAssets();
        console.log('DEBUG 2 Assets loaded:', assets);
        if (!assets['bomb']) {
            console.error('Failed to load sprites');
            return;
        }

        // app.stage.addChild(assets.bomb);
    } catch {
        console.error('Failed to load sprites');
        // alert('Failed to load sprites:', error);
    }
}

setup();

/**
 * Debug function
 */
function test() {
    console.log('test success');
}###EOF###


loader.js:
/**
 * Loads a manifest of asset bundles using PIXI Assets.
 * @param {Object} manifest - The manifest object containing bundles of assets.
 * @returns {Promise<Object>} A promise that resolves with the loaded assets.
 */
async function loadAssetsManifest(manifest) {
    try {
        await PIXI.Assets.init({ manifest: manifest });

        // load all bundles defined in the manifest
        const promises = Object.keys(manifest.bundles).map(bundleName => {
            return PIXI.Assets.loadBundle(bundleName);
        });

        // wait for all bundles to load
        const results = await Promise.all(promises);

        // combine all loaded assets into a single object
        let allAssets = {};
        results.forEach(bundle => {
            Object.assign(allAssets, bundle);
        });

        return allAssets;
    } catch (error) {
        console.error('Failed to load assets:', error);
        throw error; // re-throw to allow handling by the caller
    }
}

export default loadAssetsManifest;###EOF###


style.css:
body {
    display: flex;
    justify-content: center;
    align-items: center;
    color: black;
    background-color: gray;
    margin: 0;
    padding: 0;
    height: 100vh;
    width: 100vw;
}

#game {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
}###EOF###
